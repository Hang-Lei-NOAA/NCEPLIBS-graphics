The tests in the following subdirectories are designed to test 
a subset of IPLIB.  It was too difficult to create a single test
that exercised every routine.  No tests were created for routines
gdsawt and ijkgds, which I think are obsolete.

1)  gausslat - a fortran program that calls routine gausslat 
    to calculate the gaussian latitudes for a t382 grid.
2)  gcdist - a fortran program that calls function gcdist and 
    subroutine movect to calculate the distance of three great
    circle routes (and their corresponding rotation parameters).
3)  gdswiz_wzd - a fortran program that calls gdswiz and gdswzd
    (and all of their child routines) to calculate lat/lon and
    other map-related fields for several grids of
    of various map projections.
4)  ipmerge2 - a fortran program that calls routine
    ipmerge2, which merges two bitmapped fields into one.  
5)  ipolates - a fortran program that interpolates a global
    lat/lon grid of substrate temperature to several grids of various
    projections using the ipolates suite of routines.  All
    interpolation options (bilinear, neighbor, etc.) are used.
6)  ipolatev - a fortran program that interpolates a global
    lat/lon grid of vector u/v wind to several grids of various
    projections using the ipolatev suite of routines.  All
    interpolation options (bilinear, neighbor, etc.) are used.
7)  ipsector - a fortran program that tests routine ipsector,
    which which creates a subset of a larger
    two-dimensional field, and routine ipspaste, which does the
    opposite.
8)  ipxetas - a fortran program that reads a field of
    vegetation greenness on a unstaggered eta grid, then 
    calls routine ipxetas to do the following transforms:
      1) create a staggered mass grid from the unstaggered grid.
      2) create a staggered velocity grid from the unstaggered grid.
      3) create an unstaggered grid from the staggered mass grid created by step (1)
      4) create an unstaggered grid from the staggered vel grid created by step (2)
9)  ipxwafs2_3 - test ip routines ipxwafs2 and ipxwafs3 by transforming
    a global grid of 600 mb temperature (on ncep grid 3) to wafs grids 37 thru 44 
    using copygb. after the global to wafs grid transforms are
    completed, copygb is invoked again to transform temperature data on each
    wafs grid back to ncep grid 3.  note: routine ipxwafs2 is invoked 
    for interpolation option '0' (bilinear) and routine ipxwafs3 
    is invoked for interpolation option '2' (neighbor).
10) ipxwafs - same as experiment 9 except a specially modified version
    of copygb is used to call iplib routine ipxwafs instead of ipxwafs2. 
    ipxwafs and ipxwafs2 are the same except the latter accounts for bitmaps.
11) makgds - a fortran program to test routine makgds.  Routine is called
    three times.
      1) create gds and kgds arrays for ncep grid 3. these arrays hold grid
         description information used by w3 grib library.
      2) make kgds array for grid 3 from gds array
      3) make gds array for grid 3 from kgds array
12) polateg - a fortran program to call the polateg group of routines
    to interpolate temperature data on a 1-degree global lat/lon grid
    to a high-res global lat/lon grid, returning their vector gradients.
    Note: the polateg routines have several errors.  So, this test is
    not currently called from the regression driver scripts (listed below). 
13) copygb - the ncep copygb program is used to transform a global lat/lon file of
    vegetation greenness to numerous standard ncep grids using all available
    interpolation options (bilinear, nearest neighbor, etc.).  Because this 
    test can take over an hour of wall clock time, and calls the same
    routines as other regression tests, it is not currently called
    from the regression driver scripts.  However, it may be run stand-alone.

In OPS, there are three versions of IPLIB:

  1) 4 byte integer/4 byte float (libip_4.a)
  2) 4 byte integer/8 byte float (libip_d.a)
  3) 8 byte integer/8 byte float (libip_8.a)

Each regression test is compiled with all versions of a 'control' and
'test' iplib (for a total of six executables).  The 'control' and 'test'
library versions are determined by the user in the "Makeall.ksh" script 
described below.

Within each regression directory, the ./src subdirectory will contain the
source code required for the regression test.  Scripts to compile and run 
are under the ./scripts subdirectory.  Makefiles and executables 
stored under the ./exec subdirectory.  Any input data is stored in the
./data subdirectory. Grads control files to view output data are 
stored in the ./grads subdirectory.  More detailed information about
each regression test is described in a README file and in the comment
sections of the scripts.

The entire suite of tests is compiled on zeus or ccs with the "Makeall.ksh"
script. You must modify this script to link the 'control' and 'test'
ip libraries to the ./lib subdirectory, or copy them manually.  The naming
convention is:  libip_ctl_4.a, libip_ctl_8.a, libip_ctl_d.a, libip_test_4.a,
libip_test_8.a, and libip_test_d.a.  See the script comments for more
details before compiling.  The executables for the control/test libraries will
be in the ./exec/ctl and ./exec/test subdirectories.  To compile just a
single regression test, invoke the "makeall.ksh" script located in that
particular test's ./scripts subdirectory (only after you copy or link the
libraries to the ./lib subdirectory).

After compilation, run the entire suite of tests on the ccs by
typing "llsubmit Runall.ccs.ksh".  On zeus, type "Runall.zeus.ksh"
Results are stored in "regression.log" in $WORK_DIR.  A summary of
results is stored in "summary.log" in $WORK_DIR.  See the script
comments for more details.  To run an individual regression test, 
invoke the runall.ksh script located in the ./scripts subdirectory.

Below is a table of each routine in iplib and which regression test(s) invoke it.

subroutine name         regression test
===============         ===============

gausslat                gausslat
gcdist                  gcdist
gdswiz                  gdswiz_wzd, ipolates, ipolatev, ipsector, ipxwafs, ipxwafs2_3, copygb
gdswiz00                gdswiz_wzd, ipolates, ipolatev, ipsector, ipxwafs, ipxwafs2_3, copygb
gdswiz01                gdswiz_wzd, ipolates, ipolatev, copygb
gdswiz03                gdswiz_wzd, ipolates, ipolatev, copygb
gdswiz04                gdswiz_wzd, ipolates, ipolatev, copygb
gdswiz05                gdswiz_wzd, ipolates, ipolatev, copygb
gdswizc9                gdswiz_wzd
gdswizca                gdswiz_wzd
gdswizcb                gdswiz_wzd, ipolates, ipolatev, copygb
gdswizcd                gdswiz_wzd, ipolates, ipolatev, copygb
gdswzd                  gdswiz_wzd, polateg
gdswzd00                gdswiz_wzd, polateg
gdswzd01                gdswiz_wzd
gdswzd03                gdswiz_wzd
gdswzd04                gdswiz_wzd
gdswzd05                gdswiz_wzd
gdswzdc9                gdswiz_wzd
gdswzdca                gdswiz_wzd
gdswzdcb                gdswiz_wzd
gdswzdcd                gdswiz_wzd
ijkgds0                 ipolates, ipolatev, ipxwafs, ipxwafs2_3, polateg, copygb
ijkgds1                 ipolates, ipolatev, ipxwafs, ipxwafs2_3
ipmerge2                ipmerge2
ipolates                ipolates, ipxwafs, ipxwafs2_3, copygb
ipolatev                ipolatev
ipsector                ipsector
ipspaste                ipsector
ipxetas                 ipxetas
ipxwafs                 ipxwafs, ipxwafs2_3
ipxwafs2                ipxwafs2_3, copygb
ipxwafs3                ipxwafs2_3, copygb
makgds                  ipxwafs, ipxwafs2_3, makgds
movect                  gcdist, ipolatev
polateg0                polateg
polateg1                polateg
polateg4                polateg
polates0                ipolates, ipxwafs, ipxwafs2_3, copygb
polates1                ipolates, copygb
polates2                ipolates, ipxwafs2_3, copygb
polates3                ipolates, copygb
polates4                ipolates, copygb
polates6                ipolates, copygb
polatev0                ipolatev
polatev1                ipolatev
polatev2                ipolatev
polatev3                ipolatev
polatev4                ipolatev
polatev6                ipolatev
polfixs                 ipolates, ipxwafs, ipxwafs2_3
polfixv                 ipolatev, polateg
